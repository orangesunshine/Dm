apply from: "${rootDir.path}/config.gradle"
//配置文件
ext.moduleConfig = moduleCfg(project.name)

def useX = moduleConfig.enX?moduleConfig.enX:false
def useKtx = moduleConfig.enKtx?moduleConfig.enX:false
def useKapt = moduleConfig.enKapt?moduleConfig.enX:false
def useLog = moduleConfig.enLog?moduleConfig.enX:false

GLog.debugSwitch = useLog

def pluginDeps = modulePlugin()
GLog.d("younger__buildCommon__build__pluginDeps: ${pluginDeps}")
if (pluginDeps && pluginDeps.size() > 0) {
    pluginDeps.forEach {
        if (it && it.startsWithAny("plugin__")) {
            apply plugin: it.replaceAll("plugin__", "")
        }
    }
}


android {
    compileSdkVersion versions.compileSdkVersion
    defaultConfig {
        minSdkVersion versions.minSdkVersion
        consumerProguardFiles 'proguard-rules.pro'
    }

    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/*'
    }

    dexOptions {
        preDexLibraries true
        preDexLibraries true
        javaMaxHeapSize "8g"
        maxProcessCount 8
        dexInProcess = true
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    if (useKtx) {
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_1_8
        }
    }

    if (useDatabinding) {
        buildFeatures.dataBinding = true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    addLibs(dependencies, pluginDeps)
}