apply {
    plugin "com.android.application"
    from "${rootDir.path}/config/buildCommon.gradle"
}
if (project.name.contains("tinker")) {
    apply from: "${rootDir.path}/config/tinker-support.gradle"
}

configSigning()

android {
    defaultConfig {
        targetSdkVersion versions.targetSdkVersion
        multiDexEnabled true
        versionCode versions.versionCode
        versionName versions.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        flavorDimensions "default"
    }

    buildTypes {
        debug {
            minifyEnabled false
            minifyEnabled false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".debug"
            buildConfigField 'String', 'BUGLY_APPID', '"81bee39138"'
        }
        release {
            shrinkResources true
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'BUGLY_APPID', '"81bee39138"'
        }
    }

    def moduleFlavors = moduleFlavors(project.name)
    println "younger__moduleFlavors: ${moduleFlavors}"
    if (null != moduleFlavors && moduleFlavors.size() > 0) {
        productFlavors {
            moduleFlavors.each {
                def flavorname = it.flavorname
                def applicationIdCfg = it.applicationId
                def manifestPlaceholdersCfg = it.manifestPlaceholders
                def buildConfigFieldCfg = it.buildConfigField
                "${flavorname}" {
                    applicationId applicationIdCfg
                    manifestPlaceholders = manifestPlaceholdersCfg
                    if (null != buildConfigFieldCfg && buildConfigFieldCfg.size() > 0) {
                        buildConfigFieldCfg.each {
                            def key = it.key
                            def value = it.value
                            if (null != key && null != value && key.length() > 0 && value.length() > 0) {
                                buildConfigField "String", key, "\"${value}\""
                            }
                        }
                    }
                }
            }
        }
    }
}

android.applicationVariants.all {
    variant ->
        variant.outputs.all {
            //在这里修改apk文件名，引号内的字符串都可以随便定义
            //outputFileName = "${variant.name}-v${variant.versionName}.apk"
        }
}

def configSigning() {

    File signPropertiesFile = file("${rootDir.path}/apk-signature/keystore.properties")
    if (!signPropertiesFile.exists()) return

    //GLog.d("${project.toString()} sign start...")
    project.android {
        Properties properties = new Properties()
        properties.load(new FileInputStream(signPropertiesFile))
        signingConfigs {
            release {
                storeFile new File(signPropertiesFile.getParent(), properties['key.file'])
                storePassword properties['store.password']
                keyAlias properties['key.alias']
                keyPassword properties['key.password']
            }
        }
        buildTypes.release.signingConfig signingConfigs.release
    }
    //GLog.d("${project.toString()} sign end...")
}
