import groovy.json.JsonSlurper

//android-versions
def versions = [:]
versions.compileSdkVersion = 29
versions.minSdkVersion = 16
versions.targetSdkVersion = 29
versions.versionCode = 1
versions.versionName = "1.0"
versions.buildToolsVersion = "30.0.2"
versions.appId = "com.orange.DM"
ext.versions = versions


//vars
ext.useKtx = hasProperty("enKtx") ? enKtx : false
ext.useX = hasProperty("enAndroidX") ? enAndroidX : false
ext.useDatabinding = hasProperty("enDatabinding") ? enDatabinding : false
ext.useKapt = hasProperty("enKapt") ? enKapt : false


//versions
def appcompat_version = "1.2.0"
def kotlin_version = "1.4.10"
def lifecycle_version = "2.2.0"
def arch_lifecycle_version = "1.1.1"
def activity_version = "1.1.0"
def fragment_version = "1.2.5"
def collection_version = "1.1.0"
def nav_version = "2.3.0"
def paging_version = "2.1.2"
def room_version = "2.2.5"
def work_version = "2.4.0"


def depContainer = [:]
ext.depContainer = depContainer


//maven
def reps_maven = []
reps_maven << "https://oss.sonatype.org/content/repositories/snapshots"
reps_maven << "https://androidx.dev/snapshots/builds/6543454/artifacts/repository/"
depContainer.reps_maven = reps_maven


//libs
//common
def common = []
common << "classpath__com.android.tools.build:gradle:4.0.1"
common << 'junit:junit:4.12'
common << 'androidx.test.ext:junit:1.1.2'
common << 'androidx.test.espresso:espresso-core:3.3.0'
common << "androidx.appcompat:appcompat:$appcompat_version"
// For loading and tinting drawables on older versions of the platform
common << "androidx.appcompat:appcompat-resources:$appcompat_version"
if (useDatabinding) {
    common << "kapt__com.android.databinding:compiler:4.0.1"
}

if (useKtx) {
    common << "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    common << 'androidx.core:core-ktx:1.3.1'
    common << "plugin__kotlin-android"
    common << "plugin__kotlin-android-extensions"
    common << "classpath__org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.10"
} else if (useX) {
    common << "androidx.core:core:1.2.0"
}

if (useKapt) {
    common << "plugin__kotlin-kapt"
}
depContainer.common = common

depContainer.constraintlayout = "androidx.constraintlayout:constraintlayout:2.0.0"
depContainer.contentpager = "androidx.contentpager:contentpager:1.0.0"
depContainer.coordinatorlayout = "androidx.coordinatorlayout:coordinatorlayout:1.1.0"
depContainer.drawerlayout = "androidx.drawerlayout:drawerlayout:1.1.1"
depContainer.gridlayout = "androidx.gridlayout:gridlayout:1.0.0"
depContainer.recyclerview = "androidx.recyclerview:recyclerview:1.1.0"
depContainer.recyclerview_selection = "androidx.recyclerview:recyclerview-selection:1.1.0-rc02"

if (useKtx) {
    depContainer.activity = "androidx.activity:activity-ktx:$activity_version"
} else if (useX) {
    depContainer.activity = "androidx.activity:activity:$activity_version"
}

if (useKtx) {
    depContainer.fragment = "androidx.fragment:fragment:$fragment_version"
} else if (useX) {
    depContainer.fragment = "androidx.fragment:fragment-ktx:$fragment_version"
}
depContainer.fragment_testing = "androidx.fragment:fragment-testing:$fragment_version"

if (useKtx) {
    depContainer.collection = "androidx.collection:collection-ktx:$collection_version"
} else if (useX) {
    depContainer.collection = "androidx.collection:collection:$collection_version"
}

// To use RoleManagerCompat
depContainer.core_role = "androidx.core:core-role:1.0.0-alpha01"

def datastore = [:]
datastore.preferences = "androidx.datastore:datastore-preferences:1.0.0-alpha01"
// Preferences DataStore
datastore.core = "androidx.datastore:datastore-core:1.0.0-alpha01"// Proto DataStore
depContainer.datastore = datastore

def paging = [:]
paging.runtime = "androidx.paging:paging-runtime:$paging_version"
// For Kotlin use paging-runtime-ktx
paging.common = "androidx.paging:paging-common:$paging_version"
// For Kotlin use paging-common-ktx// alternatively - without Android dependencies for testing
paging.rxjava2 = "androidx.paging:paging-rxjava2:$paging_version"
// For Kotlin use paging-rxjava2-ktx// optional - RxJava support
depContainer.paging = paging


def nav = [:]
if (useKtx) {
    nav.fragment = "androidx.navigation:navigation-fragment-ktx:$nav_version"
    nav.ui = "androidx.navigation:navigation-ui-ktx:$nav_version"
} else if (useX) {
    nav.fragment = "androidx.navigation:navigation-fragment:$nav_version"
    nav.ui = "androidx.navigation:navigation-ui:$nav_version"
}
nav.dynamic_features_fragment = "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"
// Testing Navigation
nav.testing = "test__androidx.navigation:navigation-testing:$nav_version"
depContainer.nav = nav

def room = [:]
room.runtime = "androidx.room:room-runtime:$room_version"
room.compiler = "kapt__androidx.room:room-compiler:$room_version"
room.rxjava2 = "androidx.room:room-rxjava2:$room_version"// optional - RxJava support for Room
room.guava = "androidx.room:room-guava:$room_version"
// optional - Guava support for Room, including Optional and ListenableFuture
room.testing = "test__androidx.room:room-testing:$room_version"// optional - Test helpers
depContainer.room = room

def work = [:]
if (useKtx) {
    work.runtime = "androidx.work:work-runtime-ktx:$work_version"// Kotlin + coroutines
} else if (useX) {
    work.runtime = "androidx.work:work-runtime:$work_version"
    work.rxjava2 = "androidx.work:work-rxjava2:$work_version"// optional - RxJava2 support
}
work.gcm = "androidx.work:work-gcm:$work_version"// optional - GCMNetworkManager support
work.testing = "test__androidx.work:work-testing:$work_version"
depContainer.work = work

def livedata = [:]
if (useKtx) {
    livedata.lifecycle = "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
} else if (useX) {
    livedata.lifecycle = "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
} else {
    livedata.lifecycle = "android.arch.lifecycle:livedata:$arch_lifecycle_version"
}
depContainer.livedata = livedata

def viewmodel = [:]
if (useKtx) {
    viewmodel.lifecycle = "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
} else if (useX) {
    viewmodel.lifecycle = "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
} else {
    viewmodel.lifecycle = "android.arch.lifecycle:viewmodel:$arch_lifecycle_version"
}
if (useX) {
    viewmodel.lifecycle_savedstate = "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"
}
depContainer.viewmodel = viewmodel

//lifecycle
def lifecycle = [:]
if (useX) {
    lifecycle.process = "androidx.lifecycle:lifecycle-process:$lifecycle_version"
    lifecycle.compiler = "apt__androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    lifecycle.java8 = "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    lifecycle.testing = "test__androidx.arch.core:core-testing:$lifecycle_version"
}
if (useKtx) {
    lifecycle.runtime = "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    lifecycle.runtime = "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"
} else if (useX) {
    lifecycle.runtime = "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    lifecycle.reactivestreams = "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"
} else {
    lifecycle.extensions = "android.arch.lifecycle:extensions:$arch_lifecycle_version"
    lifecycle.runtime = "android.arch.lifecycle:runtime:$arch_lifecycle_version"
    lifecycle.compiler = "apt__android.arch.lifecycle:compiler:$arch_lifecycle_version"
    lifecycle.java8 = "android.arch.lifecycle:common-java8:$arch_lifecycle_version"
    lifecycle.reactivestreams = "android.arch.lifecycle:reactivestreams:$arch_lifecycle_version"
    lifecycle.testing = "android.arch.core:core-testing:$arch_lifecycle_version"
}
depContainer.lifecycle = lifecycle

def coroutines = [:]
coroutines.kotlinx_coroutines_core = "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.1"
coroutines.kotlinx_coroutines_android = "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.1"
depContainer.coroutines = coroutines

def hilt = []
hilt << "com.google.dagger:hilt-android:2.28-alpha"
hilt << "kapt__com.google.dagger:hilt-android-compiler:2.28-alpha"
hilt << "plugin__dagger.hilt.android.plugin"
hilt << "classpath__com.google.dagger:hilt-android-gradle-plugin:2.28-alpha"
depContainer.hilt = hilt

//三方
depContainer.gson = 'com.google.code.gson:gson:2.8.0'
depContainer.glide = 'com.github.bumptech.glide:glide:4.9.0'
def retrofit = []
retrofit << "com.squareup.retrofit2:retrofit:2.5.0"
retrofit << "com.squareup.retrofit2:adapter-rxjava2:2.5.0"
retrofit << 'com.squareup.retrofit2:converter-gson:2.5.0'
depContainer.retrofit = retrofit
depContainer.rxjava2 = 'io.reactivex.rxjava2:rxjava:2.1.12'
depContainer.rxandroid = 'io.reactivex.rxjava2:rxandroid:2.0.2'

def dagger2 = []
dagger2 << "com.google.dagger:dagger:2.28.1"
dagger2 << "kapt__com.google.dagger:dagger-compiler:2.28.1"
depContainer.dagger2 = dagger2

//方法
def handleDep(DependencyHandler handler, CharSequence dep) {
    if (dep.startsWithAny("test__")) {
        handler.implementation dep.replaceAll("test__", "")
    } else if (dep.startsWithAny("api__")) {
        handler.api dep.replaceAll("api__", "")
    } else if (dep.startsWithAny("kapt__")) {
        def aapt = dep.replaceAll("kapt__", "")
        println "aapt: ${aapt}"
        handler.kapt dep.replaceAll("kapt__", "")
    } else if (dep.startsWithAny("apt__")) {
        handler.annotationProcessor dep.replaceAll("apt__", "")
    } else if (!dep.contains("__")) {
        handler.implementation dep
    }
}

def addLibs(DependencyHandler handler, Object deps) {
    if (deps) {
        if (deps instanceof Map) {
            if (deps.size() > 0) {
                deps.each {
                    if (it.value) {
                        addLibs(handler, it.value)
                    }
                }
            }
        } else if (deps instanceof List) {
            deps.forEach {
                if (it) {
                    addLibs(handler, it)
                }
            }
        } else if (deps instanceof CharSequence) {
            handleDep(handler, deps)
        }
    }
}

ext.addLibs = this.&addLibs

def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
    depContainer.reps_maven.forEach {
        handler.maven { url "${it}" }
    }
}

ext.addRepos = this.&addRepos

def parseConfig() {
    return new JsonSlurper().parse(file("${rootDir.path}/config.json"))
}

if (!ext.has("jsonConfig")) {
    ext.jsonConfig = parseConfig()
}

/**
 * setting根据config.json配置模块
 * @param settings
 * @return
 */
def includeModule(Settings settings) {
    if (jsonConfig && jsonConfig.size() > 0) {
        def includeModules = []
        jsonConfig.each {
            def key = it.key
            def modules = it.value
            if (modules && modules.size() > 0) {
                modules.forEach {
                    if (it) {
                        def cfg = it.config
                        if (cfg && cfg.isApply) {
                            //include module
                            def path = key
                            if (it.path) path += it.path
                            def modulename = ":" + path.replace(":", "_")
                            def modulepath = path.replace(":", "/")
                            settings.include modulename
                            includeModules << modulename
                            project(modulename).projectDir = file(modulepath)
                        }
                    }
                }
            }
        }
        println "younger__config__includeModule__includeModules: ${includeModules}"
    }
}

ext.includeModule = this.&includeModule

def cycleFilter(Object deps, String filter) {
    def filterDeps = []
    if (deps) {
        if (deps instanceof Map && deps.size() > 0) {
            deps.each {
                if (it.value) {
                    def mapDeps = cycleFilter(it.value, filter)
                    if (mapDeps && mapDeps.size() > 0) {
                        filterDeps.addAll(mapDeps)
                    }
                }
            }
        } else if (deps instanceof List && deps.size() > 0) {
            deps.forEach {
                if (it) {
                    def listDeps = cycleFilter(it, filter)
                    if (listDeps && listDeps.size() > 0) {
                        filterDeps.addAll(listDeps)
                    }
                }
            }
        } else if (deps.startsWithAny(filter)) {
            filterDeps.add(deps)
        }
    }
    return filterDeps
}

/**
 *  config 记录各个模块配置信息
 * @return 返回依赖，引用工程classpath plugin
 */
def cfgNdClasspath() {
    GLog.l("younger__config__cfgNdClasspath: ${jsonConfig}")
    def depKeys = []
    def classpathDeps = []
    depKeys << "common"
    if (jsonConfig && jsonConfig.size() > 0) {
        jsonConfig.each {
            def modules = it.value
            if (modules && modules.size() > 0) {
                modules.forEach {
                    def cfg = it.config
                    if (cfg && cfg.isApply) {
                        //classpath
                        def deps = it.deps
                        if (deps && deps.size() > 0) {
                            deps.forEach {
                                if (it) {
                                    depKeys << it
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (depKeys && depKeys.size() > 0) {
        depKeys.forEach {
            if (it) {
                def deps = depContainer.get(it)
                def filters = cycleFilter(deps, "classpath__")
                if (filters && filters.size() > 0) {
                    classpathDeps.addAll(filters)
                }
            }
        }
    }
    return classpathDeps
}

ext.cfgNdClasspath = this.&cfgNdClasspath

/**
 * 模块引用plugin
 * @return
 */
def modulePlugin() {
    def pluginDeps = []
    def depKeys = []
    depKeys << "common"
    if (jsonConfig && jsonConfig.size() > 0) {
        jsonConfig.each {
            def key = it.key
            def modules = it.value
            if (modules && modules.size() > 0) {
                modules.forEach {
                    def cfg = it.config
                    if (cfg && cfg.isApply) {
                        //include module
                        def path = key
                        if (it.path) path += it.path
                        def modulename = ":" + path.replace(":", "_")
                        if (modulename && modulename.equals(project.name)) {
                            depKeys << it.deps
                        }
                    }
                }
            }
        }
    }

    if (depKeys && depKeys.size() > 0) {
        depKeys.forEach {
            if (it) {
                def deps = depContainer.get(it)
                def filters = cycleFilter(deps, "")
                if (filters && filters.size() > 0) {
                    pluginDeps.addAll(filters)
                }
            }
        }
    }
    return pluginDeps
}

ext.modulePlugin = this.&modulePlugin

def moduleCfg(String moduleName) {
    def ret
    if (jsonConfig && jsonConfig.size() > 0) {
        jsonConfig.each {
            def key = it.key
            def modules = it.value
            if (modules && modules.size() > 0) {
                modules.forEach {
                    def cfg = it.config
                    if (cfg && cfg.isApply) {
                        //include module
                        def path = key
                        if (it.path) path += it.path
                        def modulename = ":" + path.replace(":", "_")
                        if (moduleName && moduleName.equals(modulename.substring(1))) {
                            ret = cfg
                        }
                    }
                }
            }
        }
    }
    return ret
}

ext.moduleCfg = this.&moduleCfg